import { Apu, ChannelType } from './apu';
import { Bus } from './bus';
import { Cpu } from './cpu/cpu';
import { Ppu } from './ppu/ppu';
import { Address, Byte } from './types';
import { Mapper, PrgBankController } from './mapper/mapper';
export declare class Nes implements PrgBankController {
    protected ram: Uint8Array;
    protected bus: Bus;
    protected cpu: Cpu;
    protected ppu: Ppu;
    protected apu: Apu;
    protected cycleCount: number;
    protected mapper: Mapper;
    private prgRom;
    private vblankCallback;
    private breakPointCallback;
    private prgBank;
    private apuChannelCount;
    static create(): Nes;
    getPaletColorTable(): Uint8Array;
    constructor();
    getBus(): Bus;
    getCpu(): Cpu;
    getPpu(): Ppu;
    getCycleCount(): number;
    setVblankCallback(callback: (leftV: number) => void): void;
    setBreakPointCallback(callback: () => void): void;
    setRomData(romData: Uint8Array): boolean | string;
    setMapper(mapper: Mapper): void;
    save(): object;
    load(saveData: any): void;
    reset(): void;
    setPadStatus(no: number, status: number): void;
    runCycles(cycles: number): number;
    step(leftCycles: number): number;
    getSoundChannelTypes(): ChannelType[];
    getSoundVolume(channel: number): number;
    getSoundFrequency(channel: number): number;
    getSoundDutyRatio(channel: number): number;
    render(pixels: Uint8Array | Uint8ClampedArray): void;
    renderNameTable1(pixels: Uint8ClampedArray, lineWidth: number, startX: number, startY: number, page: number): void;
    renderPatternTable(pixels: Uint8ClampedArray, lineWidth: number, colorGroups: Uint8Array): void;
    setPrgBank(bank: number, page: number): void;
    createMapper(mapperNo: number, prgSize: number, romHash?: string): Mapper;
    readFromApu(adr: Address): Byte;
    writeToApu(adr: Address, value: Byte): void;
    protected setMemoryMap(): void;
    private tryHblankEvent;
    private interruptVBlank;
    private interruptNmi;
}
