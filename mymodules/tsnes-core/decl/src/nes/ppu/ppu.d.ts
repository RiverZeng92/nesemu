import { Address, Byte } from '../types';
import { MirrorMode } from './types';
export declare class Ppu {
    suppressSpriteFlicker: boolean;
    private chrData;
    private regs;
    private vram;
    private oam;
    private mirrorMode;
    private hcount;
    private latch;
    private ppuAddr;
    private bufferedValue;
    private hevents;
    private hstatusMgr;
    private scrollTemp;
    private scrollLatch;
    private hclipZero;
    private offscreen;
    constructor();
    reset(): void;
    save(): object;
    load(saveData: any): void;
    setChrData(chrData: Uint8Array): void;
    setChrBank(value: number): void;
    setChrBankOffset(bank: number, value: number): void;
    getMirrorMode(): MirrorMode;
    setMirrorMode(mode: MirrorMode): void;
    read(reg: number): Byte;
    write(reg: number, value: Byte): void;
    copyWithDma(array: Uint8Array, start: Address): void;
    setVBlank(): void;
    clearVBlank(): void;
    interruptEnable(): boolean;
    getSpritePatternTableAddress(): Address;
    setHcount(hcount: number): void;
    render(pixels: Uint8Array | Uint8ClampedArray): void;
    renderPattern(pixels: Uint8ClampedArray, lineWidth: number, colorGroups: Uint8Array): void;
    writePpuDirect(addr: Address, value: Byte): void;
    dumpVram(start: Address, count: number): void;
    renderNameTable1(pixels: Uint8ClampedArray, lineWidth: number, startX: number, startY: number, nameTableOffset: number): void;
    getPalet(pal: number): number;
    getReg(index: number): Byte;
    private isChrRam;
    private renderBg;
    private isSprite8x16;
    private renderSprite;
    private checkSprite0Hit;
    private getNonEmptySprite0Line;
    private addHevent;
    private incScrollCounter;
    private readPpuDirect;
    private render8x8Chip;
}
