import { Bus } from '../bus';
import { Address, Byte } from '../types';
interface Regs {
    a: Byte;
    x: Byte;
    y: Byte;
    s: Byte;
    p: Byte;
    pc: Address;
}
export declare class Cpu {
    private bus;
    private a;
    private x;
    private y;
    private s;
    private negative;
    private overflow;
    private breakmode;
    private decimal;
    private irqBlocked;
    private reservedFlag;
    private zero;
    private carry;
    private pc;
    private breakPoints;
    private watchRead;
    private watchWrite;
    private paused;
    private irqDetected;
    private $DEBUG;
    private stepLogs;
    constructor(bus: Bus);
    reset(): void;
    getRegs(): Regs;
    save(): object;
    load(saveData: any): void;
    deleteAllBreakPoints(): void;
    pause(value: boolean): void;
    isPaused(): boolean;
    nmi(): void;
    requestIrq(): void;
    step(): number;
    private getStatusReg;
    private setStatusReg;
    private read8;
    private read16;
    private read16Indirect;
    private write8;
    private push;
    private push16;
    private pop;
    private pop16;
    private setNZFlag;
    private setNZCFlag;
    private setOverFlow;
    private addStepLog;
    private getAdr;
    private branch;
    private handleIrq;
}
export {};
